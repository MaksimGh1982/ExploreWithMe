{
  "info": {
    "name": "Event Comments",
    "description": "–ö–æ–ª–ª–µ–∫—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–æ–±—ã—Ç–∏–π",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "adminUsername",
      "value": "admin",
      "type": "string"
    },
    {
      "key": "adminPassword",
      "value": "admin",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "eventId",
      "value": "",
      "type": "string"
    },
    {
      "key": "commentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "pendingCommentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "categoryId",
      "value": "1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üèóÔ∏è 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
      "item": [
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"testuser@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.eql('Test User');",
                  "    pm.collectionVariables.set(\"userId\", jsonData.id.toString());",
                  "    console.log(\"Saved user ID: \" + jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Categories",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories",
              "host": ["{{baseUrl}}"],
              "path": ["categories"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Categories retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.collectionVariables.set(\"categoryId\", jsonData[0].id.toString());",
                  "        console.log(\"Using category ID: \" + jsonData[0].id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"annotation\": \"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã\",\n  \"category\": {{categoryId}},\n  \"description\": \"–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API.\",\n  \"eventDate\": \"2025-12-31 20:00:00\",\n  \"location\": {\n    \"lat\": 55.7558,\n    \"lon\": 37.6173\n  },\n  \"paid\": false,\n  \"participantLimit\": 100,\n  \"requestModeration\": true,\n  \"title\": \"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/events",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "events"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Event created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.annotation).to.include('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ');",
                  "    pm.collectionVariables.set(\"eventId\", jsonData.id.toString());",
                  "    console.log(\"Saved event ID: \" + jsonData.id);",
                  "    console.log(\"Using user ID: \" + pm.collectionVariables.get(\"userId\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üí¨ 2. –ü—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
      "item": [
        {
          "name": "Get Approved Comments (empty initially)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}", "comments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"No approved comments initially\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã, –ø–æ—ç—Ç–æ–º—É –º–∞—Å—Å–∏–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                  "    console.log(\"Found \" + jsonData.length + \" approved comments\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üë§ 3. –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)",
      "item": [
        {
          "name": "Add Comment to Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ! –û—á–µ–Ω—å –∂–¥—É —ç—Ç–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. –ë—É–¥—É —Ä–∞–¥ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "events", "{{eventId}}", "comments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Comment created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.content).to.eql('–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ! –û—á–µ–Ω—å –∂–¥—É —ç—Ç–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. –ë—É–¥—É —Ä–∞–¥ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ.');",
                  "    pm.expect(jsonData.status).to.eql('PENDING');",
                  "    pm.collectionVariables.set(\"commentId\", jsonData.id.toString());",
                  "    console.log(\"Saved comment ID: \" + jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Add Another Comment (for moderation)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"–≠—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–æ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "events", "{{eventId}}", "comments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Second comment should fail due to duplicate\", function () {",
                  "    // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Comment",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments/{{commentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "events", "{{eventId}}", "comments", "{{commentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Comment updated successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.content).to.eql('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!');",
                  "    pm.expect(jsonData.status).to.eql('PENDING'); // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üõ°Ô∏è 4. –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (Admin)",
      "item": [
        {
          "name": "Get Pending Comments (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Basic YWRtaW46YWRtaW4="
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/pending",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "comments", "pending"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Pending comments exist\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    ",
                  "    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å PENDING",
                  "    jsonData.forEach(comment => {",
                  "        pm.expect(comment.status).to.eql(\"PENDING\");",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Approve Comment (Admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Basic YWRtaW46YWRtaW4="
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/comments/{{commentId}}/approve",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "comments", "{{commentId}}", "approve"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Comment approved successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"APPROVED\");",
                  "    pm.expect(jsonData.id).to.eql(parseInt(pm.collectionVariables.get(\"commentId\")));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "‚úÖ 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
      "item": [
        {
          "name": "Get Approved Comments (should show approved comment)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}", "comments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Approved comments visible\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    ",
                  "    // –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å APPROVED",
                  "    jsonData.forEach(comment => {",
                  "        pm.expect(comment.status).to.eql(\"APPROVED\");",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Comment",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments/{{commentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "events", "{{eventId}}", "comments", "{{commentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Comment deleted successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Verify Comment Deleted",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}", "comments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Comment no longer exists\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å",
                  "    console.log(\"Found \" + jsonData.length + \" comments after deletion\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "‚ùå 6. –¢–µ—Å—Ç—ã –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
      "item": [
        {
          "name": "Add Comment with Empty Content",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "events", "{{eventId}}", "comments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 for empty content\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Add Comment to Non-existent Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Test comment\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/events/99999/comments",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "events", "99999", "comments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 for non-existent event\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Add Comment with Non-existent User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Test comment\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/99999/events/{{eventId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["users", "99999", "events", "{{eventId}}", "comments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 for non-existent user\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "console.log('Starting test collection for Comments API');"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "console.log('Test completed: ' + pm.info.requestName);"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "auth": {
    "type": "basic",
    "basic": [
      {
        "key": "username",
        "value": "{{adminUsername}}",
        "type": "string"
      },
      {
        "key": "password",
        "value": "{{adminPassword}}",
        "type": "string"
      }
    ]
  }
}